syntax enable
set t_Co=256
let g:solarized_termcolors=16
set background=dark
colorscheme solarized

if has('gui_running')
    set background=light
else
    set background=dark
endif


set nocompatible   " be iMproved
filetype off
filetype plugin indent on  " required!

set bs=2
set ts=4
set sw=4
set number
" shows row and column number at bottom right corner
set ruler
set mouse-=a     " Turn off visual mode
set nospell
set spell spelllang=en_us
set wrap!
set nowrap           " do not automatically wrap on load


" ---------------------------------------
" Vim-airline configuration
" ---------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" let g:airline_theme='luna'


" let g:airline_theme='solarized'
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:solarized_termtrans = 1
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" old vim-powerline symbols
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

" ---------------------------------------
" Powerline configuration
" ---------------------------------------
let g:Powerline_symbols = 'fancy'
let g:promptline_theme = 'airline'
let g:promptline_powerline_symbols = 0
let g:Powerline_dividers_override = [[0xe0b0], [0xe0b1], [0xe0b2], [0xe0b3]]

let g:promptline_preset = {
      \'a'    : [ '\h', '\u', '\j' ],
      \'c'    : [ '\w' ]}

" ---------------------------------------
" YouCompleteME Configuration
" ---------------------------------------
" " Start auto-completion after 3 chars
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_min_num_identifier_candidate_chars = 3
let g:ycm_enable_diagnostic_highlighting = 0

" Don't show YCM's preview window [ I find it really annoying ]
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0

" ---------------------------------------
" Vim JavaScript Configuration
" ---------------------------------------
autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
set completeopt-=preview
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1

augroup javascript_folding
    au!
    au FileType javascript setlocal foldmethod=syntax
augroup END

nmap <leader>d <Plug>(ale_fix)

" ---------------------------------------
" Vim NERDTree Configuration
" ---------------------------------------
autocmd vimenter * NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-i> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Disable the scrollbars (NERDTree)
set guioptions-=r
set guioptions-=L
" Keep NERDTree window fixed between multiple toggles
set winfixwidth

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :bN<cr>

" Move to the next buffer
nmap <leader>l :bn<CR>

" Move to the previous buffer
nmap <leader>h :bp<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Trailing whitespace {{{
" Only shown when not in insert mode so I don't go insane.
augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:␣
  au InsertLeave * :set listchars+=trail:␣
augroup END

" Remove trailing whitespaces when saving
autocmd BufWritePre * :%s/\s\+$//e
